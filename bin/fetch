#!/usr/bin/env php
<?php

// TODO: Support verifying other hashes (esp. tiger-tree)

function findBootstrapFile() {
	$bss = "vendor/autoload.php";
	foreach( array(__DIR__, getcwd()) as $dir ) {
		$prevDir = null;
		while( $dir !== null and $dir !== $prevDir ) {
			if( file_exists($bsf = "$dir/$bss") ) {
				return $bsf;
			}
			$prevDir = $dir;
			$dir = dirname($dir);
		}
	}
	throw new Exception("'$bss' not found");
}


$usageText1 = "Usage: $argv[0] [options] <source URN> -o <dest file>";
$usageText2 =
	"$usageText1\n".
	"\n".
	"Options:\n".
	"  -repo <url>          ; remote repository to pull from\n".
	"  -repo @<file.lst>    ; remote repository list file\n".
	"  -extrovert           ; load repository lists from various sources\n".
	"  -cache-repo <path>   ; local repository to cache into\n".
	"  -cache-sector <name> ; name of sector to cache into";	

$homedir = isset($_SERVER['HOME']) ? $_SERVER['HOME'] : getenv('HOME');

$extroverted = false;
$cacheRepo = $homedir ? "$homedir/.ccouch" : null;
$cacheSector = 'cache';
$remoteRepoSpecs = array();
$sourceUrn = null;
$destFile = null;
$mode = 'fetch';
for( $i=1; $i<count($argv); ++$i ) {
	if( '-repo' == $argv[$i] ) {
		$r = $argv[++$i];
		$remoteRepoSpecs[$r] = $r;
	} else if( '-extrovert' == $argv[$i] ) {
		$extroverted = true;
	} else if( '-cache-repo' == $argv[$i] ) {
		$cacheRepo = $argv[++$i];
	} else if( '-cache-sector' == $argv[$i] ) {
		$cacheSector = $argv[++$i];
	} else if( '-o' == $argv[$i] ) {
		if( $destFile !== null ) {
			fwrite(STDERR,
				"Error: Destination file specified multiple times:\n".
				"'$destFile', '".$argv[++$i]."'\n\n$usageText1\n");
			exit(1);
		}
		$destFile = $argv[++$i];
	} else if( $argv[$i][0] != '-' or $argv[$i] == '-' ) {
		if( $sourceUrn === null ) {
			$sourceUrn = $argv[$i];
		} else if( $destFile === null ) {
			$destFile = $argv[$i];
 		} else {
			fwrite(STDERR, "Error: Extraneous third non-option argument: '$argv[$i]'\n\n$usageText1\n");
			exit(1);
		}
	} else if( '-dump-config' == $argv[$i] ) {
		$mode = 'dump-config';
	} else if( '-?' == $argv[$i] ) {
		$mode = 'show-help';
	} else {
		fwrite(STDERR, "Error: Unrecognized option: '$argv[$i]'\n\n$usageText2\n");
		exit(1);
	}
}

if( $mode == 'show-help' ) {
	echo "$usageText2\n";
	exit(0);
}

require_once findBootstrapFile();

$remoteRepoUrls = array();
if( $extroverted ) {
	TOGoS_Fetcher::loadStandardRepoLists($remoteRepoUrls);
}
foreach( $remoteRepoSpecs as $r ) {
	if( $r[0] == '@' ) {
		$rf = substr($r,1);
		TOGoS_Fetcher::loadRepoList($rf, $remoteRepoUrls);
	} else {
		$url = TOGoS_Fetcher::defuzzRemoteRepoPrefix($r);
		$remoteRepoUrls[$url] = $url;
	}
}

if( $mode == 'dump-config' ) {
	echo "Remote repositories:\n";
	foreach( $remoteRepoUrls as $url ) {
		echo "  $url\n";
	}
	exit(0);
}

if( $sourceUrn === null ) {
	fwrite(STDERR, "Error: No source URN specified\n\n$usageText1\n");
	exit(1);
}
if( $destFile === null ) {
	fwrite(STDERR, "Error: No destination file specified\n\n$usageText1\n");
	exit(1);
}

// foreach( $remoteRepoUrls as $r ) echo $r, "\n";

$fetcher = new TOGoS_Fetcher( $cacheRepo, $cacheSector, $remoteRepoUrls );
try {
	$fetcher->checkout( $sourceUrn, $destFile );
} catch( TOGoS_Fetcher_FetchFailure $f ) {
	fwrite(STDERR, "Error: Failed to fetch $sourceUrn.\n");
	foreach( $f->messages as $m ) {
		if( preg_match('/^(.+?): (.+)$/', $m, $bif) ) {
			fwrite(STDERR, "  $bif[1]:\n    $bif[2]\n");
		} else {
			fwrite(STDERR, "  $m\n");
		}
	}
	exit(1);
}
